# Editor for git and othes
export GIT_EDITOR=vim
export EDITOR=vim

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.aliases ]; then
    . ~/.aliases
fi


# Load rvm.sh from profile.d if it exists
if [ -f /etc/profile.d/rvm.sh ]; then
    . /etc/profile.d/rvm.sh
fi

# Load ssh keys
if [[ $(uname) == 'Darwin' ]]; then
    if [ -z "$SSH_AUTH_SOCK" ] ; then
      eval `ssh-agent -s`
      ssh-add -A
      # add additional keys space delimited after id_rsa
      for f in id_rsa
      do
          if [ -f ~/.ssh/$f ]; then
              # Add files if it wasn't added by the keychain
              command -v ssh-add && ! ssh-add -l | grep .ssh/$f && ssh-add ~/.ssh/$f
          fi
      done
    fi
fi

# Let ctrl-s work
stty stop undef
stty start undef
command -v setopt && setopt noflowcontrol

# Disable XON and XOFF which enables CTRL+S to work in VIM's CommandT - may be
# able to drop the one above, it was added later
stty ixany
stty ixoff -ixon

# activate rbenv if it exists
if [ -d ~/.rbenv ]; then
  echo 'Activating rbenv from ~/.sharedrc'
  export PATH=~/.rbenv/bin:$PATH
  eval "$(rbenv init -)"
fi

# set the tmp dir if we're on a yelp box
if [ -d /nail/tmp ]; then
  echo 'Setting TMPDIR to /nail/tmp'
  export TMPDIR=/nail/tmp
fi


# Shares the ssh-auth-socket, which is useful for accessing the agent inside
# of screens or when using mosh
SOCK=$HOME/.ssh-auth-sock-$USER.sock

function share-ssh-auth-socket() {
  if [ "$SSH_AUTH_SOCK" != "$SOCK" ]; then
    if ssh-add -l > /dev/null 2>&1; then
      echo "Shared SSH Auth Socket at $SOCK"
      /bin/ln -sf $SSH_AUTH_SOCK $SOCK
    fi
  fi
}

function use-shared-ssh-auth-socket() {
  export SSH_AUTH_SOCK=$SOCK
}

function autopsql() {
  # drop into a redshift psql shell by specifying the cluster's identifier
  # for example
  #
  # $ autopsql bam-dw-v1
  # .
  # .
  # datawarehouse>
  echo 'finding connection settings'
  CI=$1
  CONN=$(aws redshift describe-clusters --region=us-west-2 | jq --raw-output -a ".[][] | select (.ClusterIdentifier==\"$CI\")" | jq 'del(.ClusterPublicKey)')
  DBHOST=$(echo $CONN | jq --raw-output .Endpoint.Address)
  PORT=$(echo $CONN | jq --raw-output .Endpoint.Port)
  DB=$(echo $CONN | jq --raw-output .DBName)
  if [ $DB = "null" ]
  then
    echo 'DBName not found, setting it as dev'
    DB="dev"
  fi
  echo 'fetching creds'
  CREDS=$(aws redshift get-cluster-credentials --db-name $DB --db-user `whoami` --cluster-identifier "${1}" --region=us-west-2)
  IAM_USERNAME=$(echo $CREDS | jq --raw-output .DbUser)
  PW=$(echo $CREDS | jq --raw-output .DbPassword)
  psql "host=$DBHOST user=$IAM_USERNAME password=$PW dbname=$DB port=$PORT sslmode=verify-ca sslrootcert=/nail/home/$USER/certs/redshift-ssl-ca-cert.pem"
}

if [ ! -z "$SSH_AUTH_SOCK" ]; then
  # There is a socket
  share-ssh-auth-socket
else
  # There is not a socket
  use-shared-ssh-auth-socket
fi

# Time helpers
function unixtime() {
  date +%s
}

function unixtime2pst() {
  TZ="America/Los_Angeles" date -d "@$1"
}

function unixtime2utc() {
  TZ="UTC" date -d "@$1"
}

# Setup go
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Setup rust
export PATH="$HOME/.cargo/bin:$PATH"

# Setup gcloud
# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then source "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then source "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# Setup pyenv
if command -v pyenv 2>/dev/null; then
  export PATH="/home/jcnnghm/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
fi

export PATH="/opt/homebrew/bin:$PATH"
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
